#include "farm.h"
#include <cmath>
#include <cstring>
#include <fstream>
#include <iostream>
#include <ctime>
#include <cmath>
#include <iomanip>

void Start(){
    AllSeeds[0].Name = "–°–µ–º–µ–Ω–∞ –ø—à–µ–Ω–∞";    AllSeeds[0].TimeGrowth = 10; AllSeeds[0].BuyCost = 4;  AllSeeds[0].SellCost = 3;  AllSeeds[0].Number = 0;
    AllSeeds[1].Name = "–°–µ–º–µ–Ω–∞ –º–æ—Ä–∫–æ–≤–∫–∏"; AllSeeds[1].TimeGrowth = 20; AllSeeds[1].BuyCost = 2;  AllSeeds[1].SellCost = 1;  AllSeeds[1].Number = 1;;
    AllSeeds[2].Name = "–°–µ–º–µ–Ω–∞ —Å–≤–µ–∫–ª—ã";   AllSeeds[2].TimeGrowth = 30; AllSeeds[2].BuyCost = 6;  AllSeeds[2].SellCost = 5;  AllSeeds[2].Number = 2;
    AllSeeds[3].Name = "–°–µ–º–µ–Ω–∞ —Ç—ã–∫–≤—ã";    AllSeeds[3].TimeGrowth = 60; AllSeeds[3].BuyCost = 12; AllSeeds[3].SellCost = 10; AllSeeds[3].Number = 3;

    AllVegatables[0].Name = "–ü—à–µ–Ω–æ";    AllVegatables[0].SellCost = 6;  AllVegatables[0].Number = 0;
    AllVegatables[1].Name = "–ú–æ—Ä–∫–æ–≤–∫–∞"; AllVegatables[1].SellCost = 4;  AllVegatables[1].Number = 1;
    AllVegatables[2].Name = "–°–≤–µ–∫–ª–∞";   AllVegatables[2].SellCost = 10; AllVegatables[2].Number = 2;
    AllVegatables[3].Name = "–¢—ã–∫–≤–∞";    AllVegatables[3].SellCost = 20; AllVegatables[3].Number = 3;
}

void BasicFarm(TgBot::Message::Ptr message) {
    TgBot::Bot bot("7590778478:AAF_Y2viQaAtczVc6xYu3NphxnFmrJh8vO8");
    bot.getApi().sendMessage(message->chat->id, "–ö—É–¥–∞ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–π—Ç–∏\n 1) –æ–≥–æ—Ä–æ–¥\n 2) –º–∞–≥–∞–∑–∏–Ω\n 3) –∞–º–±–∞—Ä\n 4) –≤—ã—Ö–æ–¥ –Ω–∞—Ä—É–∂—É\n");
    BasicFlag = true;
    GardenFlag = false;
    StorehouseFlag = false;
    ShopFlag = false;
}


void StoreHouse(TgBot::Message::Ptr message){
    TgBot::Bot bot("7590778478:AAF_Y2viQaAtczVc6xYu3NphxnFmrJh8vO8");
    MessageOut = "–í—ã –≤ –∞–º–±–∞—Ä–µ, —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤—É\ny –≤–∞—Å ";
    MessageOut.append(std::to_string(money));
    MessageOut.append(" –¥–µ–Ω–µ–≥ \n");
    if (AllYouSeed != 0) {
        MessageOut.append("–í–∞—à–∏ —Å–µ–º–µ–Ω–∞:\n");
        for (int i = 0; i < AvailableSeed; i++) {
            if (AllSeeds[i].amount != 0){
                MessageOut.append(std::to_string(AllSeeds[i].amount));
                MessageOut.append(": ");
                MessageOut.append(AllSeeds[i].Name);
                MessageOut.append("\n");
            }
        }
    }
    if (AllYourVegatables != 0) {
        MessageOut.append("\n–í–∞—à–∏ –æ–≤–æ—â–∏:\n");
        for (int i = 0; i < AvailableSeed; i++) {
            if (AllVegatables[i].amount != 0){
                MessageOut.append(std::to_string(AllVegatables[i].amount));
                MessageOut.append(": " );
                MessageOut.append(AllVegatables[i].Name);
                MessageOut.append("\n\n");
            }
        }
    }
    bot.getApi().sendMessage(message->chat->id, MessageOut);
    MessageOut.clear();
}

void ShopOut(TgBot::Message::Ptr message) {
    TgBot::Bot bot("7590778478:AAF_Y2viQaAtczVc6xYu3NphxnFmrJh8vO8");
    MessageOut.append("–£ –≤–∞—Å: \n");
    MessageOut.append(std::to_string(money));
    MessageOut.append(" –¥–µ–Ω–µ–≥ \n");
    MessageOut.append("–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤: \n");
    for (int i = 0; i < AvailableSeed; i++) {
        MessageOut.append(std::to_string(i+1));
        MessageOut.append(") ");
        MessageOut.append(AllSeeds[i].Name);
        MessageOut.append(" –¶–µ–Ω–∞: ");
        MessageOut.append(std::to_string(AllSeeds[i].BuyCost));
        MessageOut.append("\n");
    }
    bot.getApi().sendMessage(message->chat->id, MessageOut);
    MessageOut.clear();
}

void BuyFirstStep(TgBot::Message::Ptr message, int Index, int Amount) { //–ü–†–û–í–ï–†–ö–ê –ù–ê –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–ï –î–ï–ù–¨–ì–ò
    TgBot::Bot bot("7590778478:AAF_Y2viQaAtczVc6xYu3NphxnFmrJh8vO8");
        money -= AllSeeds[Index - 1].BuyCost * Amount;
    AllSeeds[Index - 1].amount += Amount;
    AllYouSeed += Amount;
    return;
}

void BuySecondStep(TgBot::Message::Ptr message) {
    TgBot::Bot bot("7590778478:AAF_Y2viQaAtczVc6xYu3NphxnFmrJh8vO8");
    MessageOut.append("–£ –≤–∞—Å: \n");
    MessageOut.append(std::to_string(money));
    MessageOut.append(" –¥–µ–Ω–µ–≥ \n");
    bot.getApi().sendMessage(message->chat->id, MessageOut);
    MessageOut.clear();
    return;
}

int* SellSeedsOut(TgBot::Message::Ptr message) {
    TgBot::Bot bot("7590778478:AAF_Y2viQaAtczVc6xYu3NphxnFmrJh8vO8");
    int schet = 0;
    int SchetAll = 1;
    if (AllYouSeed != 0) {
        MessageOut.append("–í–∞—à–∏ —Å–µ–º–µ–Ω–∞(–≤–≤–µ–¥–∏—Ç–µ –∏—Ö –∏–Ω–¥–µ–∫—Å):\n");
        for (int i = 0; i < AvailableSeed; i++) {
            if (AllSeeds[i].amount != 0){
                UsedSeedsInSellingSec[schet] = i;
                MessageOut.append(std::to_string(SchetAll));
                MessageOut.append(") ");
                MessageOut.append(AllSeeds[i].Name);
                MessageOut.append(": ");
                MessageOut.append(std::to_string(AllSeeds[i].amount));
                MessageOut.append("\n");
                ++schet;
                ++SchetAll;
            }
        }
    }
    bot.getApi().sendMessage(message->chat->id, MessageOut);
    MessageOut.clear();
    return UsedSeedsInSellingSec;
}

void SellSeeds(TgBot::Message::Ptr message, int Index, int Amount) {
    TgBot::Bot bot("7590778478:AAF_Y2viQaAtczVc6xYu3NphxnFmrJh8vO8");
    if (Index > 0 && Index <= AvailableSeed && Amount > 0 && AllSeeds[UsedSeedsInSellingSec[Index - 1]].amount >= Amount) {
        money += AllSeeds[UsedSeedsInSellingSec[Index - 1]].BuyCost * Amount;
        AllSeeds[UsedSeedsInSellingSec[Index - 1]].amount -= Amount;
        AllYouSeed -= Amount;
    } else {
        bot.getApi().sendMessage(message->chat->id, "–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ ");
    }
}

void SellVegetables(TgBot::Message::Ptr message) {
    TgBot::Bot bot("7590778478:AAF_Y2viQaAtczVc6xYu3NphxnFmrJh8vO8");
    if (AllYourVegatables != 0) {
        MessageOut.append("\n–í–∞—à–∏ –æ–≤–æ—â–∏:\n");
        for (int i = 0; i < AvailableSeed; i++) {
            if (AllVegatables[i].amount != 0){
                MessageOut.append(std::to_string(AllVegatables[i].amount));
                MessageOut.append(": " );
                MessageOut.append(AllVegatables[i].Name);
                MessageOut.append("\n\n");
            }
        }
    }
    bot.getApi().sendMessage(message->chat->id, MessageOut);
    MessageOut.clear();

    bot.getApi().sendMessage(message->chat->id,"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–≤–æ—â–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å, –ø–æ –ø–æ—Ä—è–¥–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ");
    int Index = 0, Amount = 0;
    std::cin >> Index >> Amount;
    if (Index > 0 && Index <= AvailableSeed && Amount > 0 && AllVegatables[Index - 1].amount >= Amount) {
        money += AllVegatables[Index - 1].SellCost * Amount;
        AllVegatables[Index - 1].amount -= Amount;
        AllYourVegatables -= Amount;
    } else {
        bot.getApi().sendMessage(message->chat->id, "–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞");
    }
}

void Garden(TgBot::Message::Ptr message){
    TgBot::Bot bot("7590778478:AAF_Y2viQaAtczVc6xYu3NphxnFmrJh8vO8");
    MessageOut.append("–í—ã –≤—ã—à–ª–∏ –≤ –æ–≥–æ—Ä–æ–¥\n–í–æ—Ç –≤–∞—à–∏ –≥—Ä—è–¥–∫–∏\n");
    time_t timeNow = time (NULL);
    for(int i = 0; i < SeedBedAmount; i++){
        if (AllSeedBeds[i].buse) {
            if (AllSeeds[AllSeedBeds[i].NumberSeed].TimeGrowth - timeNow + AllSeedBeds[i].TimeLanding > 0){
                MessageOut.append("ü™∫  ");
                MessageOut.append( AllSeeds[AllSeedBeds[i].NumberSeed].Name);
                MessageOut.append(" –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è ");
                MessageOut.append(std::to_string(AllSeeds[AllSeedBeds[i].NumberSeed].TimeGrowth - timeNow + AllSeedBeds[i].TimeLanding));
                MessageOut.append("\n");
            } else {
                MessageOut.append("ü™∫  ");
                MessageOut.append(AllSeeds[AllSeedBeds[i].NumberSeed].Name);
                MessageOut.append(" —Å–æ–∑—Ä–µ–ª–∏\n");
            }
        }else {
            MessageOut.append("ü™π \n");
        }
    }
    bot.getApi().sendMessage(message->chat->id, MessageOut);
    MessageOut.clear();
    bot.getApi().sendMessage(message->chat->id,  "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å ?\n 1)–ø—Ä–æ–≤–µ—Ä–∏—Ç—å_—Ä–∞—Å—Ç–µ–Ω–∏—è\n 2)–ø–æ—Å–∞–¥–∏—Ç—å_—Å–µ–º–µ–Ω–∞\n 3)—Å–æ–±—Ä–∞—Ç—å_–≤—Å—ë\n 4)–æ–±—Ä–∞—Ç–Ω–æ\n");
}

void PlantSeedOut(TgBot::Message::Ptr message) {
    TgBot::Bot bot("7590778478:AAF_Y2viQaAtczVc6xYu3NphxnFmrJh8vO8");
    if (AllYouSeed != 0) {
        MessageOut.append("—Å–µ–º–µ–Ω–∞:\n");
        int Number = 1;
        int schet = 0;
        for (int i = 0; i < AvailableSeed; i++) {
            if (AllSeeds[i].amount != 0){
                UsedSeedsInSellingSec[schet] = i;
                MessageOut = std::to_string(Number);
                MessageOut.append(") ");
                MessageOut.append(AllSeeds[i].Name);
                MessageOut.append(" ");
                MessageOut.append(std::to_string(AllSeeds[i].amount));
                bot.getApi().sendMessage(message->chat->id, MessageOut);
                MessageOut.clear();
                Number++;
            }
        }
    } else {
        bot.getApi().sendMessage(message->chat->id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—è–Ω , –ø–æ—Ç–æ–º—É —á—Ç–æ –∏—Ö –Ω–∞–¥–æ –∫—É–ø–∏—Ç—å");
    }
    bot.getApi().sendMessage(message->chat->id, "–∫–∞–∫–∏–µ —Å–µ–º–µ–Ω–∞(–Ω–æ–º–µ—Ä) –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–∞–¥–∏—Ç—å ?\n");
}

void PlantSeed(TgBot::Message::Ptr message, int Index, int Amount) {
    TgBot::Bot bot("7590778478:AAF_Y2viQaAtczVc6xYu3NphxnFmrJh8vO8");
    --Index;
    for(int i = 0; Amount > 0 && i < SeedBedAmount; i++){
        if (!AllSeedBeds[i].buse && AllSeeds[UsedSeedsInSellingSec[Index]].amount > 0){
            AllSeedBeds[i].buse = true;
            AllSeedBeds[i].NumberSeed = UsedSeedsInSellingSec[Index];
            AllSeedBeds[i].TimeLanding = time (NULL);
            Amount--;
            AllSeeds[UsedSeedsInSellingSec[Index]].amount--;
            AllYouSeed--;
        }
    }
    if (Amount != 0) {
        bot.getApi().sendMessage(message->chat->id, "–£ –≤–∞—Å –∫–æ–Ω—á–∏–ª–∏—Å—å —Å–µ–º–µ–Ω–∞(–º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ—Å–∞–¥–∏—Ç—å —Å—Ç–æ–ª—å–∫–æ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–µ–ª–∏)\n");
    }

}
