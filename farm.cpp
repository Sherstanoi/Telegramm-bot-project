#include "farm.h"
#include <cmath>
#include <cstring>
#include <fstream>
#include <iostream>
#include <ctime>
#include <cmath>
#include <iomanip>

int money = 200;


int AvailableSeed = 4; //–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–º—è–Ω
const int MaxAvailableSeed = 7; // –º–∞–∫—Å–∏–º—É–º —Å–µ–º—è–Ω(–¥–ª—è –ø–æ—Å–ª–µ –ø—Ä–æ–∫–∞—á–∫–∏)

Seed AllSeeds[MaxAvailableSeed]; // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–µ–º—è–Ω
int AllYouSeed = 0;    // –≤—Å–µ–≥–æ —Å–µ–º—è–Ω.121

Vegatebles AllVegatables[MaxAvailableSeed]; // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≥–æ—Ç–æ–≤—ã—Ö –æ–≤–æ—â–µ–π
int AllYourVegatables = 0;     // –≤—Å–µ –æ–≤–æ—â–∏

int SeedBedAmount = 5;             //–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—è–¥–æ–∫
const int MaxSeedBedAmount = 8;        //–º–∞–∫—Å–∏–º—É–º –≥—Ä—è–¥–æ–∫
SeedBed AllSeedBeds[MaxSeedBedAmount];  //–ò–Ω—Ñ–∞


void Start(){
    AllSeeds[0].Name = "–°–µ–º–µ–Ω–∞ –ø—à–µ–Ω–∞";    AllSeeds[0].TimeGrowth = 10; AllSeeds[0].BuyCost = 4;  AllSeeds[0].SellCost = 3;  AllSeeds[0].Number = 0;
    AllSeeds[1].Name = "–°–µ–º–µ–Ω–∞ –º–æ—Ä–∫–æ–≤–∫–∏"; AllSeeds[1].TimeGrowth = 20; AllSeeds[1].BuyCost = 2;  AllSeeds[1].SellCost = 1;  AllSeeds[1].Number = 1;
    AllSeeds[2].Name = "–°–µ–º–µ–Ω–∞ —Å–≤–µ–∫–ª—ã";   AllSeeds[2].TimeGrowth = 30; AllSeeds[2].BuyCost = 6;  AllSeeds[2].SellCost = 5;  AllSeeds[2].Number = 2;
    AllSeeds[3].Name = "–°–µ–º–µ–Ω–∞ —Ç—ã–∫–≤—ã";    AllSeeds[3].TimeGrowth = 60; AllSeeds[3].BuyCost = 12; AllSeeds[3].SellCost = 10; AllSeeds[3].Number = 3;

    AllVegatables[0].Name = "–ü—à–µ–Ω–æ";    AllVegatables[0].SellCost = 6;  AllVegatables[0].Number = 0;
    AllVegatables[1].Name = "–ú–æ—Ä–∫–æ–≤–∫–∞"; AllVegatables[1].SellCost = 4;  AllVegatables[1].Number = 1;
    AllVegatables[2].Name = "–°–≤–µ–∫–ª–∞";   AllVegatables[2].SellCost = 10; AllVegatables[2].Number = 2;
    AllVegatables[3].Name = "–¢—ã–∫–≤–∞";    AllVegatables[3].SellCost = 20; AllVegatables[3].Number = 3;
}

void BasicFarm(TgBot::Message::Ptr message) {
    TgBot::Bot bot("7614764220:AAGAIgGzIBr5kFpaVnf4YA8QyRlkBbcHj0s");
    bot.getApi().sendMessage(message->chat->id, "–ë–õ–ê –ë–õ–ê –ë–õ–ê –õ–û–†\n–∫y–¥a –ø–æ–π–¥–µ–º?\n 1) –æ–≥–æ—Ä–æ–¥\n 2) –º–∞–≥–∞–∑–∏–Ω\n 3) –∞–º–±–∞—Ä\n 4) –≤—ã—Ö–æ–¥ –Ω–∞—Ä—É–∂—É\n");
    BasicFlag = true;
    GardenFlag = false;
    StorehouseFlag = false;
    ShopFlag = false;
}


void Storehouse(TgBot::Message::Ptr message){
    TgBot::Bot bot("7614764220:AAGAIgGzIBr5kFpaVnf4YA8QyRlkBbcHj0s");
    std::cout << "–í—ã –∞–º–±–∞—Ä–µ —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤–æ, –µ—Å–ª–∏ –æ–Ω–æ y –≤–∞—Å –µ—Å—Ç—å)\ny –≤–∞—Å\n";
    std::cout << money << '\n';
    if (AllYouSeed != 0) {
        std::cout << "–í–∞—à–∏ —Å–µ–º–µ–Ω–∞:\n";
        for (int i = 0; i < AvailableSeed; i++) {
            if (AllSeeds[i].amount != 0){
                std::cout << AllSeeds[i].amount << ": " << AllSeeds[i].Name << '\n';
            }
        }
    }
    if (AllYourVegatables != 0) {
        std::cout << "\n–í–∞—à–∏ –æ–≤–æ—â–∏:\n";
        for (int i = 0; i < AvailableSeed; i++) {
            if (AllVegatables[i].amount != 0){
                std::cout << AllVegatables[i].amount << ": " << AllVegatables[i].Name <<'\n'<<'\n';
            }
        }
    }
}

void shopOut(TgBot::Message::Ptr message) {
    TgBot::Bot bot("7614764220:AAGAIgGzIBr5kFpaVnf4YA8QyRlkBbcHj0s");
    const int kLengthColumn = 20;
    const int kPrecision = 10;

    std::cout << std::setw(15) << "–≤–∏–¥" << ' ' << '\n';//<< std::setw(kLengthColumn) << " —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–º–µ—á–∫–∞ (–ø—Ä–æ–¥–∞–∂–∞/–ø–æ–∫—É–ø–∫–∞)" << std::setw(kLengthColumn) << " —É –≤–∞—Å —Å–µ–º–µ—á–µ–∫" << std::setw(kLengthColumn) << " —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–≤–æ—â–∞" << std::setw(kLengthColumn) << " —É –≤–∞—Å –æ–≤–æ—â–µ–π" << std::endl;

    for (int i = 0; i < AvailableSeed; i++) {
        std::cout  << std::setw(15) << AllVegatables[i].Name << ' ' << '\n';//<< std::setw(kLengthColumn) << AllSeed[i].SellCost << '/' << AllSeed[i].BuyCost << std::setw(kLengthColumn) << AllSeed[i].amount << std::setw(kLengthColumn) << AllVegatebles[i].SellCost << std::setw(kLengthColumn) << AllVegatebles[i].amount << std::endl;
    }
}

void Shop(TgBot::Message::Ptr message) {
    TgBot::Bot bot("7614764220:AAGAIgGzIBr5kFpaVnf4YA8QyRlkBbcHj0s");
    while (true) {
        shopOut(message);
        bot.getApi().sendMessage(message->chat->id, "–í—ã —Ö–æ—Ç–∏—Ç–µ:\n1) –∫—É–ø–∏—Ç—å\n2) –ø—Ä–æ–¥–∞—Ç—å —Å–µ–º–µ–Ω–∞\n3) –ø—Ä–æ–¥–∞—Ç—å –æ–≤–æ—â–∏\n4) –≤—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞: \n");
        //std::cout << "–í—ã —Ö–æ—Ç–∏—Ç–µ:\n1) –∫—É–ø–∏—Ç—å\n2) –ø—Ä–æ–¥–∞—Ç—å —Å–µ–º–µ–Ω–∞\n3) –ø—Ä–æ–¥–∞—Ç—å –æ–≤–æ—â–∏\n4) –≤—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞: \n";
        int way = 0;
        std::cin >> way;
        switch (way) {
            case 1:{
                Buy(message);
                break;
            }
            case 2:{
                SellSeeds(message);
                break;
            }
            case 3:{
                SellVegetables(message);
                break;
            }
            case 4:{
                return;
                break;

            }
            default:{
                std::cout << "–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–ª –∏–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ –Ω–µ —Ç–∞–∫\n";
            }
        }
    }
}

void Buy(TgBot::Message::Ptr message) {
    TgBot::Bot bot("7614764220:AAGAIgGzIBr5kFpaVnf4YA8QyRlkBbcHj0s");
    bot.getApi().sendMessage(message->chat->id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ");
    int Index = 0, Amount = 0;
    std::cin >> Index >> Amount;
    if (Index > 0 && Index <= AvailableSeed && Amount > 0 && AllSeeds[Index - 1].BuyCost * Amount <= money) {
        money -= AllSeeds[Index - 1].BuyCost * Amount;
        AllSeeds[Index - 1].amount += Amount;
        AllYouSeed += Amount;
    } else {
        bot.getApi().sendMessage(message->chat->id, "–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–ª –∏–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ –Ω–µ —Ç–∞–∫");
    }
    return;
}

void SellSeeds(TgBot::Message::Ptr message) {
    TgBot::Bot bot("7614764220:AAGAIgGzIBr5kFpaVnf4YA8QyRlkBbcHj0s");
    bot.getApi().sendMessage(message->chat->id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ");
    int Index = 0, Amount = 0;
    std::cin >> Index >> Amount;
    if (Index > 0 && Index <= AvailableSeed && Amount > 0 && AllSeeds[Index - 1].amount >= Amount) {
        money += AllSeeds[Index - 1].BuyCost * Amount;
        AllSeeds[Index - 1].amount -= Amount;
        AllYouSeed -= Amount;
    } else {
        bot.getApi().sendMessage(message->chat->id, "–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–ª –∏–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ –Ω–µ —Ç–∞–∫");    }
    return;
}

void SellVegetables(TgBot::Message::Ptr message) {
    TgBot::Bot bot("7614764220:AAGAIgGzIBr5kFpaVnf4YA8QyRlkBbcHj0s");
    bot.getApi().sendMessage(message->chat->id,"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ");
    int Index = 0, Amount = 0;
    std::cin >> Index >> Amount;
    if (Index > 0 && Index <= AvailableSeed && Amount > 0 && AllVegatables[Index - 1].amount >= Amount) {
        money += AllVegatables[Index - 1].SellCost * Amount;
        AllVegatables[Index - 1].amount -= Amount;
        AllYourVegatables -= Amount;
    } else {
        bot.getApi().sendMessage(message->chat->id, "–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–ª –∏–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ –Ω–µ —Ç–∞–∫");
    }
}

void gardenOut(TgBot::Message::Ptr message) {
    TgBot::Bot bot("7614764220:AAGAIgGzIBr5kFpaVnf4YA8QyRlkBbcHj0s");
    bot.getApi().sendMessage(message->chat->id, "–í—ã –≤ –≥—Ä—è–¥–∫–∞—Ö (—Å–æ–≤–µ—Ç –¥–Ω—è: –ù–µ –≤—ã—Ä–∞—â–∏–≤–∞–π—Ç–µ –∫–æ–Ω–∞–ø–ª—é)\n –í–æ—Ç –≤–∞—â–∏ –≥—Ä—è–¥–∫–∏\n");
    //std::cout << "–í—ã –≤ –≥—Ä—è–¥–∫–∞—Ö (—Å–æ–≤–µ—Ç –¥–Ω—è: –ù–µ –≤—ã—Ä–∞—â–∏–≤–∞–π—Ç–µ –∫–æ–Ω–∞–ø–ª—é)\n –í–æ—Ç –≤–∞—â–∏ –≥—Ä—è–¥–∫–∏\n";
    time_t timeNow = time (NULL);
    for(int i = 0; i < SeedBedAmount; i++){
        if (AllSeedBeds[i].buse) {
            if (AllSeeds[AllSeedBeds[i].NumberSeed].TimeGrowth - timeNow + AllSeedBeds[i].TimeLanding > 0){
                bot.getApi().sendMessage(message->chat->id, "ü™∫  ");
                bot.getApi().sendMessage(message->chat->id, AllSeeds[AllSeedBeds[i].NumberSeed].Name);
                bot.getApi().sendMessage(message->chat->id, " –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è ");
                bot.getApi().sendMessage(message->chat->id, std::to_string(AllSeeds[AllSeedBeds[i].NumberSeed].TimeGrowth - timeNow + AllSeedBeds[i].TimeLanding));
                //std::cout << "ü™∫  " << AllSeeds[AllSeedBeds[i].NumberSeed].Name << " –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è " << AllSeeds[AllSeedBeds[i].NumberSeed].TimeGrowth - timeNow + AllSeedBeds[i].TimeLanding << '\n';
            } else {
                bot.getApi().sendMessage(message->chat->id, "ü™∫  ");
                bot.getApi().sendMessage(message->chat->id, AllSeeds[AllSeedBeds[i].NumberSeed].Name);
                bot.getApi().sendMessage(message->chat->id, " —Å–æ–∑—Ä–µ–ª\n");
                //std::cout << "ü™∫  " << AllSeeds[AllSeedBeds[i].NumberSeed].Name << " —Å–æ–∑—Ä–µ–ª\n";
            }
        }else {
            bot.getApi().sendMessage(message->chat->id, "ü™π \n");
            //std::cout << "ü™π \n";
        }
    }
}

void Garden(TgBot::Message::Ptr message){
    TgBot::Bot bot("7614764220:AAGAIgGzIBr5kFpaVnf4YA8QyRlkBbcHj0s");
    //while(true) {
        gardenOut(message);
        if (AllYouSeed != 0) {
            bot.getApi().sendMessage(message->chat->id, "—Å–µ–º–µ–Ω–∞:");
            int nomber = 1;
            for (int i = 0; i < AvailableSeed; i++) {
                if (AllSeeds[i].amount != 0){
                    bot.getApi().sendMessage(message->chat->id, std::to_string(nomber));
                    bot.getApi().sendMessage(message->chat->id,  ") " );
                    bot.getApi().sendMessage(message->chat->id,  AllSeeds[i].Name);
                    bot.getApi().sendMessage(message->chat->id,  std::to_string(AllSeeds[i].amount));
                    std::cout << nomber << ") " << AllSeeds[i].Name << ' ' << AllSeeds[i].amount << '\n';
                    nomber++;
                }
            }
            std::cout << "\n";
        } else {
            bot.getApi().sendMessage(message->chat->id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—è–Ω , –ø–æ—Ç–æ–º—É —á—Ç–æ –∏—Ö –Ω–∞–¥–æ –∫—É–ø–∏—Ç—å");
        }

        //std::cout << "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å ?\n 1)–æ–±–Ω–æ–≤–∏—Ç—å\n 2)–ø–æ—Å–∞–¥–∏—Ç—å —Å–µ–º–µ–Ω–∞\n 3)—Å–æ–±—Ä–∞—Ç—å –≤—Å–µ\n 4)–æ–±—Ä–∞—Ç–Ω–æ\n";
        bot.getApi().sendMessage(message->chat->id,  "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å ?\n 1)–æ–±–Ω–æ–≤–∏—Ç—å\n 2)–ø–æ—Å–∞–¥–∏—Ç—å_—Å–µ–º–µ–Ω–∞\n 3)—Å–æ–±—Ä–∞—Ç—å –≤—Å–µ\n 4)–æ–±—Ä–∞—Ç–Ω–æ\n");
        int way = 0;
        //std::cin >> way;
        // switch (way) {
        //     case 1:{
        //         break;
        //     }
        //     case 2:{
        //         PlantSeed(message);
        //         break;
        //     }
        //     case 3:{
        //         for(int i = 0; i < SeedBedAmount; i++) {
        //             Storehouse(message);
        //             if (AllSeedBeds[i].buse && AllSeeds[AllSeedBeds[i].NumberSeed].TimeGrowth - time (NULL) + AllSeedBeds[i].TimeLanding <= 0) {
        //                 AllSeedBeds[i].buse = false;
        //                 AllVegatables[AllSeeds[AllSeedBeds[i].NumberSeed].Number].amount++;
        //                 AllYourVegatables++;
        //             }
        //         }
        //         break;
        //     }
        //     case 4:{
        //         return ;
        //     }
        //     default:{
        //         std::cout << "—á—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ \n";
        //         break;
        //     }
        //}
    //}
}

void PlantSeed(TgBot::Message::Ptr message) {
    TgBot::Bot bot("7614764220:AAGAIgGzIBr5kFpaVnf4YA8QyRlkBbcHj0s");
    int Index = 0, Amount = 0;

    bot.getApi().sendMessage(message->chat->id, "–∫–∞–∫–∏–µ —Å–µ–º–µ–Ω–∞(–Ω–æ–º–µ—Ä) –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–∞–¥–∏—Ç—å ?\n");
    std::cin >> Index;
    bot.getApi().sendMessage(message->chat->id, "—Å–∫–æ–ª—å–∫–æ —Å–µ–º—è–Ω(—á–∏—Å–ª–æ) –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–∞–¥–∏—Ç—å ?\n");
    std::cin >> Amount;
    Index--;
    if (Index < 0) {
        return;
    }
    for (int i = 0; i < AvailableSeed; i++) {
        if (AllSeeds[i].amount != 0 && Index != 0){
            Index--;
        } else if (AllSeeds[i].amount != 0) {
            Index = i;
            return;
        }
    }
    std::cout << Index << '\n';

    if (AllSeeds[Index].amount == 0) {
        bot.getApi().sendMessage(message->chat->id, "–í—ã —á–æ ,—É –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–∏—Ö —Å–µ–º—è–Ω\n");
        return;
    }
    for(int i = 0; Amount > 0 && i < SeedBedAmount; i++){
        if (!AllSeedBeds[i].buse && AllSeeds[Index].amount > 0){
            AllSeedBeds[i].buse = true;
            AllSeedBeds[i].NumberSeed = Index;
            AllSeedBeds[i].TimeLanding = time (NULL);
            Amount--;
            AllSeeds[Index].amount--;
            AllYouSeed--;
        }
    }
    if (Amount != 0) {
        bot.getApi().sendMessage(message->chat->id, "–£ –≤–∞—Å –∫–æ–Ω—á–∏–ª–∏—Å—å —Å–µ–º–µ–Ω–∞(–º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ—Å–∞–¥–∏—Ç—å —Å—Ç–æ–ª—å–∫–æ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–µ–ª–∏)\n");
    }

}
